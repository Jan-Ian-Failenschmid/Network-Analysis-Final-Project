theta <- getmatrix(analysis, "sigma_epsilon_within")
# Latent variance-covariance:
psi <- getmatrix(analysis, "sigma_zeta_within")
# Use semPlot to standardize:
semPlot_mod <- lisrelModel(LY = lambda, TE = theta, PS = psi)
modMats <- modelMatrices(semPlot_mod, "Mplus")
lambdastd <- modMats$Lambda[[1]]$std
# Number of latents:
nLat <- ncol(lambdastd)
# Number of observed:
nObs <- nrow(lambdastd)
# Edgelist for graph:
Edgelist <- cbind(
c(col(lambdastd)),c(row(lambdastd))+ncol(lambdastd),c(lambdastd)
)
# shape:
shape <- c(rep("ellipse",nLat),rep("rectangle",nObs))
# Size1:
size1 <-  c(rep(18,nLat),rep(5,nObs))
# Size2:
size2 <-  c(rep(10,nLat),rep(5,nObs))
# Edge connect points:
ECP <- Edgelist
ECP[,1] <- NA # 0.5*pi
ECP[,2] <- 0
#Latent Labels
latLabels <-  c("Racial Attitudes (RA)", "Gay Attitudes (GA)", "Social Behaviour (SB)",
"Living Standard (LS)", "Working Mothers (WM)", "Morals (M)", "Religiounsess (R)",
"Equal Wealth (EW)", "Finance Household (FH)")
#Manifest Labels
manLabels <- names(df_clean[8:32])
# Size of labels:
labelCex <- c(
rep(1.5,nLat),
rep(1,nObs)
)
# Starting layout:
Layout <- rbind(
cbind(
# seq(-1,1,length=nLat+2)[-c(1,nLat+2)],
seq(-0.8,0.8,length=nLat),
1
),
cbind(
seq(-1,1,length=nObs+2)[-c(1,nObs+2)],
0
)
)
# Plot and save to PDF:
qgraph(Edgelist,
shape = shape,
vsize = size1,
vsize2 = size2,
layout = Layout,
mar = c(4,1,7,1),
edgeConnectPoints = ECP,
labels = c(latLabels, manLabels),
label.scale = FALSE,
label.cex = labelCex,
asize = 5,
theme = "colorblind",
filetype = "pdf",
filename = "panelloadings",
width = 15,
height = 3,
cut = 0)
## Plot and Save latent variable Loading's
# Load results:
analysis <- model
# FACTOR LOADINGS
# Standardize at the within-subject level
# Unstandardized factor loadings:
lambda <- getmatrix(analysis, "lambda")
# Residual variances:
theta <- getmatrix(analysis, "sigma_epsilon_within")
# Latent variance-covariance:
psi <- getmatrix(analysis, "sigma_zeta_within")
# Use semPlot to standardize:
semPlot_mod <- lisrelModel(LY = lambda, TE = theta, PS = psi)
modMats <- modelMatrices(semPlot_mod, "Mplus")
lambdastd <- modMats$Lambda[[1]]$std
# Number of latents:
nLat <- ncol(lambdastd)
# Number of observed:
nObs <- nrow(lambdastd)
# Edgelist for graph:
Edgelist <- cbind(
c(col(lambdastd)),c(row(lambdastd))+ncol(lambdastd),c(lambdastd)
)
# shape:
shape <- c(rep("ellipse",nLat),rep("rectangle",nObs))
# Size1:
size1 <-  c(rep(18,nLat),rep(5,nObs))
# Size2:
size2 <-  c(rep(10,nLat),rep(5,nObs))
# Edge connect points:
ECP <- Edgelist
ECP[,1] <- NA # 0.5*pi
ECP[,2] <- 0
#Latent Labels
latLabels <-  c("Racial Attitudes (RA)", "Gay Attitudes (GA)", "Social Behaviour (SB)",
"Living Standard (LS)", "Working Mothers (WM)", "Morals (M)", "Religiounsess (R)",
"Equal Wealth (EW)", "Finance Household (FH)", "News Consumption")
#Manifest Labels
manLabels <- names(df_clean[8:32])
# Size of labels:
labelCex <- c(
rep(1.5,nLat),
rep(1,nObs)
)
# Starting layout:
Layout <- rbind(
cbind(
# seq(-1,1,length=nLat+2)[-c(1,nLat+2)],
seq(-0.8,0.8,length=nLat),
1
),
cbind(
seq(-1,1,length=nObs+2)[-c(1,nObs+2)],
0
)
)
# Plot and save to PDF:
qgraph(Edgelist,
shape = shape,
vsize = size1,
vsize2 = size2,
layout = Layout,
mar = c(4,1,7,1),
edgeConnectPoints = ECP,
labels = c(latLabels, manLabels),
label.scale = FALSE,
label.cex = labelCex,
asize = 5,
theme = "colorblind",
filetype = "pdf",
filename = "panelloadings",
width = 15,
height = 3,
cut = 0)
#Latent Labels
latLabels <-  c("Racial Attitudes (RA)", "Gay Attitudes (GA)", "Social Behaviour (SB)",
"Living Standard (LS)", "Working Mothers (WM)", "Morals (M)", "Religiounsess (R)",
"Equal Wealth (EW)", "Finance Household (FH)", "News Consumption")
#Latent Labels
latLabels <-  c("Racial Attitudes (RA)", "Gay Attitudes (GA)", "Social Behaviour (SB)",
"Living Standard (LS)", "Working Mothers (WM)", "Morals (M)", "Religiounsess (R)",
"Equal Wealth (EW)", "Finance Household (FH)", "News Consumption (NC)", "Happiness (H)")
## Plot and Save latent variable Loading's
# Load results:
analysis <- model
# FACTOR LOADINGS
# Standardize at the within-subject level
# Unstandardized factor loadings:
lambda <- getmatrix(analysis, "lambda")
# Residual variances:
theta <- getmatrix(analysis, "sigma_epsilon_within")
# Latent variance-covariance:
psi <- getmatrix(analysis, "sigma_zeta_within")
# Use semPlot to standardize:
semPlot_mod <- lisrelModel(LY = lambda, TE = theta, PS = psi)
modMats <- modelMatrices(semPlot_mod, "Mplus")
lambdastd <- modMats$Lambda[[1]]$std
# Number of latents:
nLat <- ncol(lambdastd)
# Number of observed:
nObs <- nrow(lambdastd)
# Edgelist for graph:
Edgelist <- cbind(
c(col(lambdastd)),c(row(lambdastd))+ncol(lambdastd),c(lambdastd)
)
# shape:
shape <- c(rep("ellipse",nLat),rep("rectangle",nObs))
# Size1:
size1 <-  c(rep(18,nLat),rep(5,nObs))
# Size2:
size2 <-  c(rep(10,nLat),rep(5,nObs))
# Edge connect points:
ECP <- Edgelist
ECP[,1] <- NA # 0.5*pi
ECP[,2] <- 0
#Latent Labels
latLabels <-  c("Racial Attitudes (RA)", "Gay Attitudes (GA)", "Social Behaviour (SB)",
"Living Standard (LS)", "Working Mothers (WM)", "Morals (M)", "Religiounsess (R)",
"Equal Wealth (EW)", "Finance Household (FH)", "Political Views (PV)",
"News Consumption (NC)")
#Manifest Labels
manLabels <- names(df_clean[8:32])
# Size of labels:
labelCex <- c(
rep(1.5,nLat),
rep(1,nObs)
)
# Starting layout:
Layout <- rbind(
cbind(
# seq(-1,1,length=nLat+2)[-c(1,nLat+2)],
seq(-0.8,0.8,length=nLat),
1
),
cbind(
seq(-1,1,length=nObs+2)[-c(1,nObs+2)],
0
)
)
# Plot and save to PDF:
qgraph(Edgelist,
shape = shape,
vsize = size1,
vsize2 = size2,
layout = Layout,
mar = c(4,1,7,1),
edgeConnectPoints = ECP,
labels = c(latLabels, manLabels),
label.scale = FALSE,
label.cex = labelCex,
asize = 5,
theme = "colorblind",
filetype = "pdf",
filename = "panelloadings",
width = 15,
height = 3,
cut = 0)
## Plot and Save latent variable Loading's
# Load results:
analysis <- model
# FACTOR LOADINGS
# Standardize at the within-subject level
# Unstandardized factor loadings:
lambda <- getmatrix(analysis, "lambda")
# Residual variances:
theta <- getmatrix(analysis, "sigma_epsilon_within")
# Latent variance-covariance:
psi <- getmatrix(analysis, "sigma_zeta_within")
# Use semPlot to standardize:
semPlot_mod <- lisrelModel(LY = lambda, TE = theta, PS = psi)
modMats <- modelMatrices(semPlot_mod, "Mplus")
lambdastd <- modMats$Lambda[[1]]$std
# Number of latents:
nLat <- ncol(lambdastd)
# Number of observed:
nObs <- nrow(lambdastd)
# Edgelist for graph:
Edgelist <- cbind(
c(col(lambdastd)),c(row(lambdastd))+ncol(lambdastd),c(lambdastd)
)
# shape:
shape <- c(rep("ellipse",nLat),rep("rectangle",nObs))
# Size1:
size1 <-  c(rep(18,nLat),rep(5,nObs))
# Size2:
size2 <-  c(rep(10,nLat),rep(5,nObs))
# Edge connect points:
ECP <- Edgelist
ECP[,1] <- NA # 0.5*pi
ECP[,2] <- 0
#Latent Labels
latLabels <-  c("Racial Attitudes (RA)", "Gay Attitudes (GA)", "Social Behaviour (SB)",
"Living Standard (LS)", "Working Mothers (WM)", "Morals (M)", "Religiounsess (R)",
"Equal Wealth (EW)", "Finance Household (FH)", "Political Views (PV)",
"News Consumption (NC)")
#Manifest Labels
manLabels <- names(df_clean[8:32])
# Size of labels:
labelCex <- c(
rep(1.5,nLat),
rep(1,nObs)
)
# Starting layout:
Layout <- rbind(
cbind(
# seq(-1,1,length=nLat+2)[-c(1,nLat+2)],
seq(-0.8,0.8,length=nLat),
1
),
cbind(
seq(-1,1,length=nObs+2)[-c(1,nObs+2)],
0
)
)
# Plot and save to PDF:
qgraph(Edgelist,
shape = shape,
vsize = size1,
vsize2 = size2,
layout = Layout,
mar = c(4,1,7,1),
edgeConnectPoints = ECP,
labels = c(latLabels, manLabels),
label.scale = FALSE,
label.cex = labelCex,
asize = 5,
theme = "colorblind",
filetype = "pdf",
filename = "panelloadings",
width = 15,
height = 3,
cut = 0)
setwd("C:/Users/Jan Failenschmid/OneDrive/Dokumente/University/Master/Network Analysis/Final Assignment/Network-Analysis-Final-Project/Network-Analysis-Final-Project")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(haven)
library(psych)
library(knitr)
library("semPlot")
library("psychonetrics")
library("xtable")
library("qgraph")
sapply(c("clean_data.r", "return_model.r", "model_search_algorithm.r",
"helperFunctions.R"), source)
df_clean <- clean_data("data/GSS_panel06w123_R6a - SPSS.sav")
## Fit model to the data
#Fit Model
model <- return_model(df_clean)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(haven)
library(psych)
library(knitr)
library("semPlot")
library("psychonetrics")
library("xtable")
library("qgraph")
sapply(c("clean_data.r", "return_model.r", "model_search_algorithm.r",
"helperFunctions.R"), source)
## Fit model to the data
#Fit Model
model <- return_model(df_clean)
model <- model %>% runmodel
# Check fit:
model %>% print
model %>% fit
model %>% parameters()
## Plot and Save latent variable Loading's
# Load results:
analysis <- model
# FACTOR LOADINGS
# Standardize at the within-subject level
# Unstandardized factor loadings:
lambda <- getmatrix(analysis, "lambda")
# Residual variances:
theta <- getmatrix(analysis, "sigma_epsilon_within")
# Latent variance-covariance:
psi <- getmatrix(analysis, "sigma_zeta_within")
# Use semPlot to standardize:
semPlot_mod <- lisrelModel(LY = lambda, TE = theta, PS = psi)
modMats <- modelMatrices(semPlot_mod, "Mplus")
lambdastd <- modMats$Lambda[[1]]$std
# Number of latents:
nLat <- ncol(lambdastd)
# Number of observed:
nObs <- nrow(lambdastd)
# Edgelist for graph:
Edgelist <- cbind(
c(col(lambdastd)),c(row(lambdastd))+ncol(lambdastd),c(lambdastd)
)
# shape:
shape <- c(rep("ellipse",nLat),rep("rectangle",nObs))
# Size1:
size1 <-  c(rep(18,nLat),rep(5,nObs))
# Size2:
size2 <-  c(rep(10,nLat),rep(5,nObs))
# Edge connect points:
ECP <- Edgelist
ECP[,1] <- NA # 0.5*pi
ECP[,2] <- 0
#Latent Labels
latLabels <-  c("Racial Attitudes (RA)", "Gay Attitudes (GA)", "Social Behaviour (SB)",
"Living Standard (LS)", "Working Mothers (WM)", "Morals (M)", "Religiounsess (R)",
"Equal Wealth (EW)", "Finance Household (FH)", "Political Views (PV)",
"News Consumption (NC)")
#Manifest Labels
manLabels <- names(df_clean[8:30])
# Size of labels:
labelCex <- c(
rep(1.5,nLat),
rep(1,nObs)
)
# Starting layout:
Layout <- rbind(
cbind(
# seq(-1,1,length=nLat+2)[-c(1,nLat+2)],
seq(-0.8,0.8,length=nLat),
1
),
cbind(
seq(-1,1,length=nObs+2)[-c(1,nObs+2)],
0
)
)
# Plot and save to PDF:
qgraph(Edgelist,
shape = shape,
vsize = size1,
vsize2 = size2,
layout = Layout,
mar = c(4,1,7,1),
edgeConnectPoints = ECP,
labels = c(latLabels, manLabels),
label.scale = FALSE,
label.cex = labelCex,
asize = 5,
theme = "colorblind",
filetype = "pdf",
filename = "panelloadings",
width = 15,
height = 3,
cut = 0)
## Plot and Save latent variable Loading's
# Load results:
analysis <- model
# FACTOR LOADINGS
# Standardize at the within-subject level
# Unstandardized factor loadings:
lambda <- getmatrix(analysis, "lambda")
# Residual variances:
theta <- getmatrix(analysis, "sigma_epsilon_within")
# Latent variance-covariance:
psi <- getmatrix(analysis, "sigma_zeta_within")
# Use semPlot to standardize:
semPlot_mod <- lisrelModel(LY = lambda, TE = theta, PS = psi)
modMats <- modelMatrices(semPlot_mod, "Mplus")
lambdastd <- modMats$Lambda[[1]]$std
# Number of latents:
nLat <- ncol(lambdastd)
# Number of observed:
nObs <- nrow(lambdastd)
# Edgelist for graph:
Edgelist <- cbind(
c(col(lambdastd)),c(row(lambdastd))+ncol(lambdastd),c(lambdastd)
)
# shape:
shape <- c(rep("ellipse",nLat),rep("rectangle",nObs))
# Size1:
size1 <-  c(rep(18,nLat),rep(5,nObs))
# Size2:
size2 <-  c(rep(10,nLat),rep(5,nObs))
# Edge connect points:
ECP <- Edgelist
ECP[,1] <- NA # 0.5*pi
ECP[,2] <- 0
#Latent Labels
latLabels <-  c("Racial Attitudes (RA)", "Gay Attitudes (GA)", "Social Behaviour (SB)",
"Living Standard (LS)", "Working Mothers (WM)", "Morals (M)", "Religiounsess (R)",
"Equal Wealth (EW)", "Political Views (PV)",
"News Consumption (NC)", "Happiness (H)")
#Manifest Labels
manLabels <- names(df_clean[8:30])
# Size of labels:
labelCex <- c(
rep(1.5,nLat),
rep(1,nObs)
)
# Starting layout:
Layout <- rbind(
cbind(
# seq(-1,1,length=nLat+2)[-c(1,nLat+2)],
seq(-0.8,0.8,length=nLat),
1
),
cbind(
seq(-1,1,length=nObs+2)[-c(1,nObs+2)],
0
)
)
# Plot and save to PDF:
qgraph(Edgelist,
shape = shape,
vsize = size1,
vsize2 = size2,
layout = Layout,
mar = c(4,1,7,1),
edgeConnectPoints = ECP,
labels = c(latLabels, manLabels),
label.scale = FALSE,
label.cex = labelCex,
asize = 5,
theme = "colorblind",
filetype = "pdf",
filename = "panelloadings",
width = 15,
height = 3,
cut = 0)
#Get NETWORKS
temporal <- getmatrix(analysis, "PDC")
contemporaneous <- getmatrix(analysis, "omega_zeta_within")
between <- getmatrix(analysis, "omega_zeta_between")
# Loop rotation:
loopRotation <- rep(NA, 6)
loopRotation[3] <- 0.8 * pi
latLabels <-  c(
"RA", "GA", "SB",
"LS", "WM", "M", "R",
"EW", "PV", "NC", "H"
)
# Plot all graphs:
max <- max(c(abs(temporal),abs(contemporaneous),abs(between)))
qgraph(temporal, layout = "spring", theme = "colorblind",  vsize = 13, mar = rep(5,4), asize = 8,
directed = TRUE, labels = latLabels, maximum = max, esize = 10, edge.labels = FALSE,
filetype = "pdf", filename = "panelPDC",
vTrans = 254, loopRotation = loopRotation,
label.scale.equal = TRUE)
qgraph(contemporaneous, layout = "spring", theme = "colorblind", vsize = 13, mar = rep(5,4),
labels = latLabels, maximum = max, esize = 10, edge.labels = FALSE,
filetype = "pdf", filename = "panelPCC",
vTrans = 254, loopRotation = loopRotation,
label.scale.equal = TRUE)
qgraph(between, layout = "spring", theme = "colorblind", vsize = 13, mar = rep(5,4),
labels = latLabels, maximum = max, esize = 10, edge.labels = FALSE,
filetype = "pdf", filename = "panelBetween",
vTrans = 254, loopRotation = loopRotation,
label.scale.equal = TRUE)
