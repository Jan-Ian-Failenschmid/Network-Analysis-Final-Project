1,0,0,0,0,0,
1,0,0,0,0,0,
1,0,0,0,0,0,
1,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,1,0,
0,0,0,0,0,1,
0,0,0,1,0,0,
0,0,0,0,1,0,
0,0,0,1,0,0,
0,1,0,0,0,0,
0,1,0,0,0,0,
0,1,0,0,0,0,
0,1,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,1,0,0,
0,0,0,0,1,0,
0,0,0,1,0,0,
0,0,0,1,0,0,
0,0,1,0,0,0,
0,0,1,0,0,0
), ncol = 6, nrow = 15, byrow = T)
lambda1 <- matrix(c(
0,0,0,1,0,0,
1,0,0,0,0,0,
1,0,0,0,0,0,
1,0,0,0,0,0,
1,0,0,0,0,0,
0,0,0,0,1,0,
0,0,0,0,1,0,
0,0,0,0,0,1,
0,0,0,1,0,0,
0,0,0,0,1,0,
0,0,0,1,0,0,
0,1,0,0,0,0,
0,1,0,0,0,0,
0,1,0,0,0,0,
0,1,0,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,0,1,0,
0,0,1,0,0,0,
0,0,0,1,0,0,
0,0,0,0,1,0,
0,0,0,1,0,0,
0,0,0,1,0,0,
0,0,1,0,0,0,
0,0,1,0,0,0
), ncol = 6, nrow = 25, byrow = T)
View(lambda1)
names(df2006)
varMat <- matrix(names(df_overall), nrow = 25, ncol = 3,
dimnames = list(var_names, c("V1", "V2", "V3")))
View(covMat)
View(varMat)
lambda <- matrix(c(
0,0,1,0,0,0,0,
1,0,0,0,0,0,0,
1,0,0,0,0,0,0,
1,0,0,0,0,0,0,
1,0,0,0,0,0,0,
1,0,0,0,1,0,0,
0,1,0,0,1,0,0,
0,1,0,0,0,1,0,
0,1,0,0,0,0,0,
0,0,1,0,1,0,0,
0,0,1,0,0,0,0,
0,0,1,0,0,0,0,
0,0,0,1,0,0,0,
0,0,0,1,0,0,0,
0,0,0,1,0,0,0,
0,0,0,0,1,0,0,
0,0,0,0,0,1,0,
0,0,0,0,0,1,0,
0,0,0,0,0,1,0,
0,0,1,0,0,0,0,
0,0,0,0,0,0,1,
0,0,1,0,0,0,0,
0,0,0,0,0,0,1,
0,0,0,0,1,0,0,
0,0,0,0,1,0,0
), ncol = 7, nrow = 25, byrow = T)
View(lambda)
latents <- c("Racial/Homosexual Attitudes", "Time with Others", "Standard of Living",
"Attitude Towards Mothers Working", "Religiousness", "Morals", "Politics/News")
model <- dlvm1(
covs = covMat, # Covariance matrix to use
nobs = nobs, # Number of observations to use
vars = varMat, # The design matrix, with a row indicating a variable and a column a wave of measurements. Note that NA indicates missing variables
lambda = lambda, # Measurement model
within_latent = "ggm", # Model within-subject contemporaneous as GGM
within_residual = "chol", # Model within-subject residuals as Cholesky
between_latent = "ggm", # Model between-subject latent as GGM
between_residual = "chol", # Model between-subject residuals as Cholesky
latents = latents # Names of the latent variables to use
)
# Load LISS summary statistics and required objects:
load("LISSSummaryStatistics.RData")
View(covMat)
var_names <- names(df_clean[8:32])
df2006 <- df_clean[df_clean$yearID == 2006, c("ID", var_names)]
df2008 <- df_clean[df_clean$yearID == 2008, c("ID", var_names)]
df2010 <- df_clean[df_clean$yearID == 2010, c("ID", var_names)]
names(df2006) <- paste(names(df2006), "2006", sep = "_")
names(df2008) <- paste(names(df2008), "2008", sep = "_")
names(df2010) <- paste(names(df2010), "2010", sep = "_")
df_overall <- full_join(df2006, df2008, by = c("ID_2006" = "ID_2008")) %>%
full_join(df2010, by = c("ID_2006" = "ID_2010"))
df_overall <- df_overall[, which(names(df_overall) != "ID_2006")]
covMat <- cov(df_overall, use = "pairwise.complete.obs")
df_clean <- clean_data("data/GSS_panel06w123_R6a - SPSS.sav")
setwd("C:/Users/Jan Failenschmid/OneDrive/Dokumente/University/Master/Network Analysis/Final Assignment/Network-Analysis-Final-Project/Network-Analysis-Final-Project")
df_clean <- clean_data("data/GSS_panel06w123_R6a - SPSS.sav")
df_clean <- clean_data("data/GSS_panel06w123_R6a - SPSS.sav")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(haven)
library(psych)
library(knitr)
source("clean_data.r")
df_clean <- clean_data("data/GSS_panel06w123_R6a - SPSS.sav")
var_names <- names(df_clean[8:32])
df2006 <- df_clean[df_clean$yearID == 2006, c("ID", var_names)]
df2008 <- df_clean[df_clean$yearID == 2008, c("ID", var_names)]
df2010 <- df_clean[df_clean$yearID == 2010, c("ID", var_names)]
names(df2006) <- paste(names(df2006), "2006", sep = "_")
names(df2008) <- paste(names(df2008), "2008", sep = "_")
names(df2010) <- paste(names(df2010), "2010", sep = "_")
df_overall <- full_join(df2006, df2008, by = c("ID_2006" = "ID_2008")) %>%
full_join(df2010, by = c("ID_2006" = "ID_2010"))
df_overall <- df_overall[, which(names(df_overall) != "ID_2006")]
covMat <- cov(df_overall, use = "pairwise.complete.obs")
View(covMat)
nobs <- nrow(df_overall)
varMat <- matrix(names(df_overall), nrow = 25, ncol = 3,
dimnames = list(var_names, c("V1", "V2", "V3")))
View(varMat)
lambda <- matrix(c(
0,0,1,0,0,0,0,
1,0,0,0,0,0,0,
1,0,0,0,0,0,0,
1,0,0,0,0,0,0,
1,0,0,0,0,0,0,
1,0,0,0,1,0,0,
0,1,0,0,1,0,0,
0,1,0,0,0,1,0,
0,1,0,0,0,0,0,
0,0,1,0,1,0,0,
0,0,1,0,0,0,0,
0,0,1,0,0,0,0,
0,0,0,1,0,0,0,
0,0,0,1,0,0,0,
0,0,0,1,0,0,0,
0,0,0,0,1,0,0,
0,0,0,0,0,1,0,
0,0,0,0,0,1,0,
0,0,0,0,0,1,0,
0,0,1,0,0,0,0,
0,0,0,0,0,0,1,
0,0,1,0,0,0,0,
0,0,0,0,0,0,1,
0,0,0,0,1,0,0,
0,0,0,0,1,0,0
), ncol = 7, nrow = 25, byrow = T)
View(lambda)
latents <- c("Racial/Homosexual Attitudes", "Time with Others", "Standard of Living",
"Attitude Towards Mothers Working", "Religiousness", "Morals", "Politics/News")
model <- dlvm1(
covs = covMat, # Covariance matrix to use
nobs = nobs, # Number of observations to use
vars = varMat, # The design matrix, with a row indicating a variable and a column a wave of measurements. Note that NA indicates missing variables
lambda = lambda, # Measurement model
within_latent = "ggm", # Model within-subject contemporaneous as GGM
within_residual = "chol", # Model within-subject residuals as Cholesky
between_latent = "ggm", # Model between-subject latent as GGM
between_residual = "chol", # Model between-subject residuals as Cholesky
latents = latents # Names of the latent variables to use
)
source(c("clean_data.r", "return_model"))
source(list("clean_data.r", "return_model"))
sapply(c("clean_data.r", "return_model"), source)
sapply(c("clean_data.r", "return_model.r"), source)
df_clean <- clean_data("data/GSS_panel06w123_R6a - SPSS.sav")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(haven)
library(psych)
library(knitr)
sapply(c("clean_data.r", "return_model.r"), source)
df_clean <- clean_data("data/GSS_panel06w123_R6a - SPSS.sav")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(haven)
library(psych)
library(knitr)
library("psychonetrics")
sapply(c("clean_data.r", "return_model.r"), source)
model <- return_model(df_clean)
model <- model %>% runmodel
model %>% parameters
model %>% fit
# Check fit:
model %>% print
model %>% fit
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(haven)
library(psych)
library(knitr)
library("psychonetrics")
sapply(c("clean_data.r", "return_model.r", "model_search_algorithm.r"), source)
model_pruned <- model_search_algorithm(model)
View(df_clean)
# Check fit:
model %>% print
model %>% fit
model %>% parameters()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(haven)
library(psych)
library(knitr)
library("psychonetrics")
sapply(c("clean_data.r", "return_model.r", "model_search_algorithm.r"), source)
#Model Search
model_pruned <- model_search_algorithm(model)
# Save model:
saveRDS(model_pruned, file="Results.RDS")
#Model Search
model_pruned <- model_search_algorithm(model)
# Check fit:
model_pruned %>% print
#Fit Model
model <- return_model(df_clean)
model <- model %>% runmodel
# Check fit:
model %>% print
model %>% fit
model %>% parameters()
#Model Search
model_pruned <- model_search_algorithm(model)
# Save model:
saveRDS(model_pruned, file="Results.RDS")
install.packages("semPlot")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(haven)
library(psych)
library(knitr)
library("semPlot")
library("psychonetrics")
sapply(c("clean_data.r", "return_model.r", "model_search_algorithm.r",
"helperFunctions.R"), source)
# Load results:
analysis <- readRDS("panelResults.RDS")
# Load results:
analysis <- readRDS("Results.RDS")
### FACTOR LOADINGS ###
# Standardize at the within-subject level
# Unstandardized factor loadings:
lambda <- getmatrix(analysis, "lambda")
# Residual variances:
theta <- getmatrix(analysis, "sigma_epsilon_within")
# Latent variance-covariance:
psi <- getmatrix(analysis, "sigma_zeta_within")
# Use semPlot to standardize:
semPlot_mod <- lisrelModel(LY = lambda, TE = theta, PS = psi)
modMats <- modelMatrices(semPlot_mod, "Mplus")
lambdastd <- modMats$Lambda[[1]]$std
# Number of latents:
nLat <- ncol(lambdastd)
# Number of observed:
nObs <- nrow(lambdastd)
# Edgelist for graph:
Edgelist <- cbind(
c(col(lambdastd)),c(row(lambdastd))+ncol(lambdastd),c(lambdastd)
)
# shape:
shape <- c(rep("ellipse",nLat),rep("rectangle",nObs))
# Size1:
size1 <-  c(rep(18,nLat),rep(5,nObs))
# Size2:
size2 <-  c(rep(10,nLat),rep(5,nObs))
# Edge connect points:
ECP <- Edgelist
ECP[,1] <- NA # 0.5*pi
ECP[,2] <- 0
latLabels <-  c(
"Racial/Homosexual Attitudes", "Time with Others", "Standard of Living",
"Attitude Towards Mothers Working", "Religiousness", "Morals", "Politics/News"
)
manLabels <- c(
"SE1", "SE2", "SE3", "Pes1", "Pes2", "Pes3", "Opt1", "Opt2", "Opt3", "LS1", "LS2", "LS3", "LS4","LS5",
"PA1","PA2","PA3","PA4","NA1","NA2","NA3","NA4"
)
# Starting layout:
Layout <- rbind(
cbind(
# seq(-1,1,length=nLat+2)[-c(1,nLat+2)],
seq(-0.8,0.8,length=nLat),
1
),
cbind(
seq(-1,1,length=nObs+2)[-c(1,nObs+2)],
0
)
)
# Plot and save to PDF:
qgraph(Edgelist,
shape = shape,
vsize = size1,
vsize2 = size2,
layout = Layout,
mar = c(4,1,7,1),
edgeConnectPoints = ECP,
labels = c(latLabels, manLabels),
label.scale = FALSE,
label.cex = labelCex,
asize = 5,
theme = "colorblind",
filetype = "pdf",
filename = "panelloadings",
width = 15,
height = 3,
cut = 0)
# Load results:
analysis <- readRDS("Results.RDS")
### FACTOR LOADINGS ###
# Standardize at the within-subject level
# Unstandardized factor loadings:
lambda <- getmatrix(analysis, "lambda")
# Residual variances:
theta <- getmatrix(analysis, "sigma_epsilon_within")
# Latent variance-covariance:
psi <- getmatrix(analysis, "sigma_zeta_within")
# Use semPlot to standardize:
semPlot_mod <- lisrelModel(LY = lambda, TE = theta, PS = psi)
modMats <- modelMatrices(semPlot_mod, "Mplus")
lambdastd <- modMats$Lambda[[1]]$std
# Number of latents:
nLat <- ncol(lambdastd)
# Number of observed:
nObs <- nrow(lambdastd)
# Edgelist for graph:
Edgelist <- cbind(
c(col(lambdastd)),c(row(lambdastd))+ncol(lambdastd),c(lambdastd)
)
# shape:
shape <- c(rep("ellipse",nLat),rep("rectangle",nObs))
# Size1:
size1 <-  c(rep(18,nLat),rep(5,nObs))
# Size2:
size2 <-  c(rep(10,nLat),rep(5,nObs))
# Edge connect points:
ECP <- Edgelist
ECP[,1] <- NA # 0.5*pi
ECP[,2] <- 0
#Latent Labels
latLabels <-  c(
"Racial/Homosexual Attitudes", "Time with Others", "Standard of Living",
"Attitude Towards Mothers Working", "Religiousness", "Morals", "Politics/News"
)
#Manifest Labels
manLabels <- names(df_clean[8:32])
# Size of labels:
labelCex <- c(
rep(1.5,nLat),
rep(1,nObs)
)
# Starting layout:
Layout <- rbind(
cbind(
# seq(-1,1,length=nLat+2)[-c(1,nLat+2)],
seq(-0.8,0.8,length=nLat),
1
),
cbind(
seq(-1,1,length=nObs+2)[-c(1,nObs+2)],
0
)
)
# Plot and save to PDF:
qgraph(Edgelist,
shape = shape,
vsize = size1,
vsize2 = size2,
layout = Layout,
mar = c(4,1,7,1),
edgeConnectPoints = ECP,
labels = c(latLabels, manLabels),
label.scale = FALSE,
label.cex = labelCex,
asize = 5,
theme = "colorblind",
filetype = "pdf",
filename = "panelloadings",
width = 15,
height = 3,
cut = 0)
### NETWORKS ###
temporal <- getmatrix(analysis, "PDC")
contemporaneous <- getmatrix(analysis, "omega_zeta_within")
between <- getmatrix(analysis, "omega_zeta_between")
# Loop rotation:
loopRotation <- rep(NA, 6)
loopRotation[3] <- 0.8 * pi
latLabels <-  c(
"SE", "Pes", "Opt", "LS",
"PA","NA"
)
### NETWORKS ###
temporal <- getmatrix(analysis, "PDC")
contemporaneous <- getmatrix(analysis, "omega_zeta_within")
between <- getmatrix(analysis, "omega_zeta_between")
# Loop rotation:
loopRotation <- rep(NA, 6)
loopRotation[3] <- 0.8 * pi
latLabels <-  c(
"SE", "Pes", "Opt", "LS",
"PA","NA"
)
max <- max(c(abs(temporal),abs(contemporaneous),abs(between)))
qgraph(temporal, layout = "spring", theme = "colorblind",  vsize = 13, mar = rep(5,4), asize = 8,
directed = TRUE, labels = latLabels, maximum = max, esize = 10, edge.labels = FALSE,
filetype = "pdf", filename = "panelPDC",
vTrans = 254, loopRotation = loopRotation,
label.scale.equal = TRUE)
# Plot all graphs:
max <- max(c(abs(temporal),abs(contemporaneous),abs(between)))
qgraph(temporal, layout = "spring", theme = "colorblind",  vsize = 13, mar = rep(5,4), asize = 8,
directed = TRUE, labels = latLabels, maximum = max, esize = 10, edge.labels = FALSE,
filetype = "pdf", filename = "panelPDC",
vTrans = 254, loopRotation = loopRotation,
label.scale.equal = TRUE)
### NETWORKS ###
temporal <- getmatrix(analysis, "PDC")
contemporaneous <- getmatrix(analysis, "omega_zeta_within")
between <- getmatrix(analysis, "omega_zeta_between")
# Loop rotation:
loopRotation <- rep(NA, 6)
loopRotation[3] <- 0.8 * pi
latLabels <-  c(
"RA", "TA", "SL", "ATMW", "R", "M", "P/N"
)
# Plot all graphs:
max <- max(c(abs(temporal),abs(contemporaneous),abs(between)))
qgraph(temporal, layout = "spring", theme = "colorblind",  vsize = 13, mar = rep(5,4), asize = 8,
directed = TRUE, labels = latLabels, maximum = max, esize = 10, edge.labels = FALSE,
filetype = "pdf", filename = "panelPDC",
vTrans = 254, loopRotation = loopRotation,
label.scale.equal = TRUE)
qgraph(contemporaneous, layout = "spring", theme = "colorblind", vsize = 13, mar = rep(5,4),
labels = latLabels, maximum = max, esize = 10, edge.labels = FALSE,
filetype = "pdf", filename = "panelPCC",
vTrans = 254, loopRotation = loopRotation,
label.scale.equal = TRUE)
qgraph(between, layout = "spring", theme = "colorblind", vsize = 13, mar = rep(5,4),
labels = latLabels, maximum = max, esize = 10, edge.labels = FALSE,
filetype = "pdf", filename = "panelBetween",
vTrans = 254, loopRotation = loopRotation,
label.scale.equal = TRUE)
### Make tables ###
### Parameter estimates ###
# Sanitize function:
# Temporal:
temporal_table <- temporal
temporal_table[temporal_table==0] <- NA
rownames(temporal_table) <- colnames(temporal_table) <- latLabels
print(xtable(temporal_table,digits = 2), floating = FALSE, NA.string = ".")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(haven)
library(psych)
library(knitr)
library("semPlot")
library("psychonetrics")
library("xtable")
library("qgraph")
sapply(c("clean_data.r", "return_model.r", "model_search_algorithm.r",
"helperFunctions.R"), source)
### Make tables ###
### Parameter estimates ###
# Sanitize function:
# Temporal:
temporal_table <- temporal
temporal_table[temporal_table==0] <- NA
rownames(temporal_table) <- colnames(temporal_table) <- latLabels
print(xtable(temporal_table,digits = 2), floating = FALSE, NA.string = ".")
# Contemporaneous:
contemporaneous_table <- contemporaneous
# Add marginal correlations:
contemporaneous_cors <- cov2cor(getmatrix(analysis, "sigma_zeta_within"))
# Add to upper tri:
contemporaneous_table[upper.tri(contemporaneous_table)] <- contemporaneous_cors[upper.tri(contemporaneous_cors)]
# Make zeroes NA:
contemporaneous_table[contemporaneous_table==0] <- NA
rownames(contemporaneous_table) <- colnames(contemporaneous_table) <- latLabels
print(xtable(contemporaneous_table,digits = 2), floating = FALSE, NA.string = ".")
# Between:
between_table <- between
# Add marginal correlations:
between_cors <- cov2cor(getmatrix(analysis, "sigma_zeta_between"))
# Add to upper tri:
between_table[upper.tri(between_table)] <- between_cors[upper.tri(between_cors)]
# Make zeroes NA:
between_table[between_table==0] <- NA
rownames(between_table) <- colnames(between_table) <- latLabels
print(xtable(between_table,digits = 2), floating = FALSE, NA.string = ".")
print(xtable(between_table,digits = 2), floating = FALSE, NA.string = ".")
